//add_filter( 'authenticate', 'alc_wp_auth', 21, 3 );

function alc_wp_auth( $user, $username, $password )
	{
	global $alc_wp_api_base_url;
	global $alc_wp_log_path;
	// Certifique-se de que um nome de usuário e uma senha estejam presentes para que possamos trabalhar com eles
   if($username == '' || $password == '')
   	{ 
   	return;
   	}
   /*if ( is_user_logged_in() ) 
   	{
		wp_logout();
		}
   $creds =  array (
   	'user_login'    => $username,
		'user_password' => $password,
		'remember'      => true,
   	);
   //tentando login
   $user = wp_signon ($creds, false);*/
   //verificando login
   // another way to call error_log():
	error_log("You messed up!", 3, $alc_wp_log_path);
   if ( ! $user )
   	{
   	//testando dados externamente
	  	$response = wp_remote_get( $alc_wp_api_base_url."/login/login?userName=".urlencode($username)."&password=".$password,array('timeout' => 120, 'httpversion' => '1.1'));
	  	$external = false;
	  	$ext_auth = alc_wp_response($response);
	  	if (!is_null($ext_auth))
			{
			$external = true;
			}
	  	
	   if( !$external ) 
	   	{
	      // Usuário não existem na API
	      $user = new WP_Error( 'denied', __("ERROR: Usuário ou Senha inválidos") );
	     	} 
	  	else  
	  		{
	      // External user exists, try to load the user info from the WordPress user table
	      $userobj = new WP_User();
	      $user = $userobj->get_data_by( 'email', $ext_auth->email ); // Does not return a WP_User object :(
	      $user = new WP_User($user->ID); // Attempt to load up the user with that ID
	
	      if( $user->ID == 0 ) 
	      	{
	         // O usuário não existe atualmente na tabela de usuários do WordPress.
				// Você chegou a uma bifurcação na estrada, escolha seu destino sabiamente

				// Se você não quiser adicionar novos usuários ao WordPress se eles não
				// já existirem, descomente a linha a seguir e remova o código de criação do usuário
	         //$user = new WP_Error( 'denied', __("ERROR: Not a valid user for this system") );
	
	         // Configure as informações mínimas necessárias do usuário para este exemplo
	         /*$userdata = array( 'user_email' => $ext_auth->email,
	                                'user_login' => $ext_auth->email,
	                                'first_name' => $ext_auth->name,
	                                'last_name' => $ext_auth->name,
	                                );*/
	         // Um novo usuário
	         $new_user_id = wp_create_user( $username, $password, $ext_auth->email );
        		if( is_wp_error( $new_user_id ) ) 
        			{
            	// Erro Ao Criar usuário
            	$user = new WP_Error( 'denied', __("ERROR: Não foi possível Criar novo usuário") );
        			}
        		else
        			{
	         	// Carregue as novas informações do usuário
	         	$user = new WP_User ($new_user_id);
	         	}
	         } 
	     	}
		}

  	// Comente esta linha se você deseja recorrer à autenticação do WordPress
	// Útil para momentos em que o serviço externo está offline
   //remove_action('authenticate', 'wp_authenticate_username_password', 20);
   
	if ( ! $user )
   	{
   	//Não existe usuário
   	$user = new WP_Error( 'denied', __("ERROR: Usuário ou Senha Inválidos") );
		}
	return $user;
	}
	
//remove_filter( 'authenticate', 'alc_wp_auth', 21, 3 );
	
function alc_wp_external_login_test($dd)
	{
	global $alc_wp_api_base_url;
	error_reporting( E_ALL );
	ini_set( 'display_errors', 1 );
	header('Content-Type: text/html');
	$username = $dd->get_param('usuario');
	$password = $dd->get_param('senha');
	$url = $alc_wp_api_base_url."/login/login?userName=".urlencode($username)."&password=".$password;
	
	$ext_auth = wp_remote_get ($url,array('timeout' => 120, 'httpversion' => '1.1'));

	$retorno = "";
	$resultado = alc_wp_response($ext_auth);
	if (!is_null($resultado))
		{
		if (isset($resultado->token))
			{
			$retorno .= $resultado->token.'<br/>';
			alc_wp_guardar_dado('token_logado',$resultado->token);
			}
		ob_start();
		echo ("<br/>Dados API:");
		print_r ($resultado);
		echo ("<br/>Sessão:");
		print_r ($_SESSION);
      $retorno .= ob_get_contents();        
      ob_clean();
   	/*$userobj = new WP_User();
		$user = $userobj->get_data_by( 'email', $resultado->email ); // Does not return a WP_User object :(
		$user = new WP_User($user->ID);
		if ($user->ID == 0)
			{
			$retorno .= "NOVO";
			$new_user_id = wp_create_user( $username, $password, $resultado->email );; // A new user has been created

      	// Carregue as novas informações do usuário
      	$user = new WP_User ($new_user_id);
			
			ob_start();
			var_dump ($user);
      	$retorno .= ob_get_contents();        
      	ob_clean();      	
      	
   		}
   	else 
   		{
   		$retorno .= "<br/>Já Cadastrado<br/>";
   		ob_start();
			var_dump ($user);
      	$retorno .= ob_get_contents();        
      	ob_clean();
   		}*/
		}
	
   $retorno .= "<br/>TESTE - ".$url;        
   
	echo '<html>'.$retorno.'</html>';
	}
	
add_action( 'rest_api_init', function () 
	{
  	register_rest_route( 'widgets', '/alc_wp_external_login_test', array(
    	'methods' => 'POST',
    	'callback' => 'alc_wp_external_login_test',
    	'permission_callback' => '__return_true',
  		) 
  		);
	});
	
function alc_wp_external_form_test() 
	{
	header('Content-Type: text/html');
	$form_html = '<!DOCTYPE html>
	<html>
		<header>
			<title>Formulario de Teste de Login</title>
			    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"/>
		</header>
	<body>';
   $form_html .= '	<div class="container-fluid">	
   <form action="'. site_url() .'/wp-json/widgets/alc_wp_external_login_test" method="POST">
	   <div class="row">
	  		<div class="mb-3 col">
	 			<label for="usuario" class="form-label">Usuário</label>
	 			<input type="text" class="form-control" id="usuario" name="usuario" aria-describedby="usuarioHelp" />
	 			<div id="usuarioHelp" class="form-text"></div>
	  		</div>
	  	</div>
	  	<div class="row">
	  		<div class="mb-3 col">
	 			<label for="senha" class="form-label">Senha</label>
	 			<input type="password" class="form-control" id="senha" name="senha" />
	  		</div>
	  	</div>
	 	<div class="row">
	  		<div class="mb-3 col form-check">
	 			<input type="checkbox" class="form-check-input" id="lembreme" name="lembreme" />
	 			<label class="form-check-label" for="lembreme">Lembra-me</label>
	  		</div>
	  	</div>
	  	<button type="submit" class="btn btn-primary">Entrar</button>
	</form>
	<div>';
	$form_html .= '	<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>
		</body>	
	</html>';
   echo $form_html;
   exit();
 	}
 	
// Hook para registrar a ação personalizada
add_action('elementor_pro/forms/new_record', 'alc_wp_external_form_submit', 10, 2);

/**
	* Função para processar o formulário
 	*
 	* @param \ElementorPro\Modules\Forms\Classes\Record $record Instância do registro do formulário.
 	* @param \ElementorPro\Modules\Forms\Classes\Form $handler Instância do manipulador do formulário.
 	*/
 	
function alc_wp_external_form_submit($record, $handler) 
	{
	global $alc_wp_external_nameform;
   // Obter os dados enviados pelo formulário
   $raw_fields = $record->get('fields');
   $fields = [];
   foreach ($raw_fields as $id => $field) 
   	{
      $fields[$id] = $field['value'];
    	}

  	// Verifique o nome do formulário para aplicar a ação apenas em um formulário específico
   $form_name = $record->get_form_settings('form_name');
   if ($alc_wp_external_nameform !== $form_name) 
   	{
      return;
    	}
   
   $username = $fields['usuario'];
	$password = $fields['senha'];
   $url = $alc_wp_api_base_url."/login/login?userName=".urlencode($username)."&password=".$password;
	
	$ext_auth = wp_remote_get ($url,array('timeout' => 120, 'httpversion' => '1.1'));
	$resultado = alc_wp_response($ext_auth);
	if (!is_null($resultado))
		{
		if (isset($resultado->token))
			{
			alc_wp_guardar_dado('nome',$resultado->name);
			alc_wp_guardar_dado('email',$resultado->email);
			alc_wp_guardar_dado('logged_in_at',time());
			alc_wp_guardar_dado('token_logado',$resultado->token);
			}
		}
	else 
		{
      error_log('Falha na autenticação: ' . $resultado->message);
    	}
   }
 	
add_action( 'rest_api_init', function () 
	{
  	register_rest_route( 'widgets', '/alc_wp_external_form_test', array(
    	'methods' => 'GET',
    	'callback' => 'alc_wp_external_form_test',
    	'permission_callback' => '__return_true',
  		) 
  		);
	});